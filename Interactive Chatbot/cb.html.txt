<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Chatbot</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 flex items-center justify-center min-h-screen p-4">
    <div class="flex flex-col md:flex-row w-full max-w-7xl gap-4">
        <!-- Chat Container -->
        <div class="chat-container bg-white dark:bg-gray-800 rounded-2xl shadow-xl w-full md:w-1/3 flex flex-col h-[80vh]">
            
            <!-- Chat Header -->
            <div class="p-4 border-b border-gray-200 dark:border-gray-700">
                <h1 class="text-2xl font-bold">Chatbot</h1>
            </div>

            <!-- Chat Messages -->
            <div id="chat-messages" class="flex-1 overflow-y-auto p-4 space-y-4">
                <!-- Initial bot message -->
                <div class="flex justify-start">
                    <div class="bg-indigo-500 text-white p-3 rounded-lg max-w-xs md:max-w-md">
                        Hello! How can I help you today?
                    </div>
                </div>
            </div>

            <!-- Chat Input Form -->
            <div class="p-4 border-t border-gray-200 dark:border-gray-700 flex flex-col space-y-2">
                <!-- Evaluation buttons go here -->
                <div id="evaluation-buttons" class="hidden flex justify-center space-x-4">
                    <button id="yes-button" class="px-4 py-2 bg-green-500 text-white rounded-xl font-medium shadow-md hover:bg-green-600 transition-colors duration-200">
                        Yes
                    </button>
                    <button id="no-button" class="px-4 py-2 bg-red-500 text-white rounded-xl font-medium shadow-md hover:bg-red-600 transition-colors duration-200">
                        No
                    </button>
                </div>
                
                <form id="chat-form" class="flex space-x-2">
                    <input
                        type="text"
                        id="user-input"
                        class="flex-1 p-3 rounded-xl border border-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Type your message..."
                    />
                    <button
                        type="submit"
                        class="p-3 bg-indigo-500 text-white rounded-xl font-medium shadow-md hover:bg-indigo-600 transition-colors duration-200"
                    >
                        Send
                    </button>
                </form>
            </div>
        </div>

        <!-- Prompt Legend -->
        <div class="prompt-legend bg-white dark:bg-gray-800 rounded-2xl shadow-xl w-full md:w-1/3 p-4 flex flex-col">
            <h2 class="text-xl font-bold mb-4">Available Prompts</h2>
            <div id="prompt-list" class="flex-1 overflow-y-auto space-y-4">
                <!-- Prompts will be dynamically generated here -->
            </div>
        </div>

        <!-- Chatbot Tree Diagram -->
        <div class="chatbot-tree-diagram bg-white dark:bg-gray-800 rounded-2xl shadow-xl w-full md:w-1/3 p-4 flex flex-col">
            <h2 class="text-xl font-bold mb-4">Chatbot Structure</h2>
            <div id="tree-diagram" class="flex-1 overflow-y-auto space-y-4">
                <!-- Tree diagram will be dynamically generated here -->
            </div>
        </div>
    </div>
    
    <script>
        // Chatbot JSON data, updated with the new structure for sub_responses
        const chatbotData = {
            "intents": [
                {
                    "tag": "greeting",
                    "patterns": ["Hi", "Hello", "Hey there", "Is anyone there?", "Good day", "Greetings"],
                    "responses": ["Hey!", "Hello, thanks for visiting!", "Hi there, how can I assist you today?", "Greetings! What can I do for you?"]
                },
                {
                    "tag": "farewell",
                    "patterns": ["Bye", "Goodbye", "See you later", "I'm leaving", "Thanks, bye"],
                    "responses": ["See you!", "Have a nice day!", "Bye! Come back again soon.", "Goodbye! Take care.", "Talk to you later!"]
                },
                {
                    "tag": "thanks",
                    "patterns": ["Thanks", "Thank you", "That's helpful", "I appreciate it", "Thanks a lot"],
                    "responses": ["Happy to help!", "Anytime!", "My pleasure!", "You're welcome!"]
                },
                {
                    "tag": "hours",
                    "patterns": ["What are your hours?", "When are you open?", "What time do you open?", "What are your opening times?", "What are your business hours?"],
                    "responses": ["Our hours are 9 AM to 5 PM, Monday to Friday.", "We are open from 9 AM to 5 PM on weekdays.", "Our business hours are Monday-Friday, 9:00 AM to 5:00 PM.", "You can find our hours on the 'About Us' page."]
                },
                {
                    "tag": "payments",
                    "patterns": ["Do you accept credit cards?", "What payment methods do you take?", "Can I pay with PayPal?", "Payment options", "What are the ways to pay?"],
                    "responses": ["We accept a variety of payment methods. What would you like to know about?", "We have several payment options available."],
                    "sub_responses": [
                        {
                            "sub_tag": "credit_card",
                            "patterns": ["Credit Card", "Visa", "MasterCard", "Amex"],
                            "responses": ["We accept Visa, MasterCard, and American Express. You can enter your card details securely at checkout."]
                        },
                        {
                            "sub_tag": "paypal",
                            "patterns": ["PayPal", "Can I pay with PayPal?", "PayPal option"],
                            "responses": ["Yes, you can pay with PayPal. Simply select the PayPal option at checkout and you'll be redirected to complete your purchase."]
                        },
                        {
                            "sub_tag": "other_payments",
                            "patterns": ["Apple Pay", "Google Pay", "Bitcoin"],
                            "responses": ["Currently, we do not accept Apple Pay, Google Pay, or cryptocurrencies."]
                        }
                    ]
                },
                {
                    "tag": "items",
                    "patterns": ["What kind of items do you have?", "What do you sell?", "What's on the menu?", "What products do you offer?", "Can you tell me about your products?"],
                    "responses": ["We have a variety of products, including electronics and home goods.", "We specialize in handmade crafts and artwork.", "Our menu features a selection of coffee, pastries, and sandwiches.", "We sell a wide range of goods, from clothing to home decor."]
                },
                {
                    "tag": "help",
                    "patterns": ["Help", "I need help", "Can you help me?", "I'm stuck", "I have a problem", "I need assistance", "Can you assist me?"],
                    "responses": ["What do you need help with?", "I can guide you to the right information. What is your question about?", "Please describe your problem, and I'll do my best to assist you.", "I'm here to help! What's your question?", "How can I assist you?"]
                },
                {
                    "tag": "product_support",
                    "patterns": ["Technical support", "Product issue", "My item is broken", "Something is wrong with my product"],
                    "responses": ["I can help with product issues. What seems to be the problem?", "I can provide some technical support. What is the product?", "Please select from the options below."],
                    "sub_responses": [
                        {
                            "sub_tag": "troubleshooting",
                            "patterns": ["Troubleshooting", "How to fix", "It's not working"],
                            "responses": ["For troubleshooting, please try restarting the device and check the user manual. If the issue persists, contact our live support."]
                        },
                        {
                            "sub_tag": "warranty",
                            "patterns": ["Warranty", "Is my product under warranty?", "Warranty information"],
                            "responses": ["Our standard warranty is 1 year from the date of purchase. Please have your receipt ready."]
                        },
                        {
                            "sub_tag": "contact",
                            "patterns": ["Contact support", "Talk to someone", "Need a human"],
                            "responses": ["You can contact our support team at support@example.com or call us at 1-800-123-4567."]
                        }
                    ]
                }
            ]
        };

        const chatMessages = document.getElementById('chat-messages');
        const chatForm = document.getElementById('chat-form');
        const userInput = document.getElementById('user-input');
        const evaluationButtons = document.getElementById('evaluation-buttons');
        const yesButton = document.getElementById('yes-button');
        const noButton = document.getElementById('no-button');
        const promptList = document.getElementById('prompt-list');
        const treeDiagram = document.getElementById('tree-diagram');
        
        let conversationState = {
            currentIntent: null
        };

        // Mock lemmatization function for demonstration purposes
        const lemmatizeText = (text) => {
            const stopwords = ["i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now"];
            const words = text.toLowerCase().split(/\s+/).filter(word => !stopwords.includes(word) && word.length > 1);
            
            // This is a simplified, conceptual lemmatizer. A real one would use a comprehensive library.
            const simpleLemmaMap = {
                "are": "be", "were": "be", "was": "be", "is": "be", "running": "run", "ran": "run",
                "payment": "pay", "payments": "pay", "payment": "pay", "hours": "hour", "times": "time", "products": "product",
                "items": "item", "help": "help", "helping": "help", "shipping": "ship"
            };
            return words.map(word => simpleLemmaMap[word] || word);
        };

        // Function to display a message in the chat window
        const addMessage = (text, isUser = false) => {
            const messageDiv = document.createElement('div');
            messageDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'}`;
            messageDiv.innerHTML = `
                <div class="p-3 rounded-lg max-w-xs md:max-w-md ${isUser ? 'bg-indigo-500 text-white' : 'bg-gray-300 text-gray-800 dark:bg-gray-700 dark:text-gray-200'}">
                    ${text}
                </div>
            `;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight; // Auto-scroll to the latest message
        };

        // Function to create and add sub-response buttons
        const createSubResponseButtons = (subResponses) => {
            const buttonsDiv = document.createElement('div');
            buttonsDiv.className = "flex flex-wrap gap-2 justify-start";
            
            subResponses.forEach(sub => {
                const button = document.createElement('button');
                button.textContent = sub.sub_tag.replace(/_/g, ' ');
                button.dataset.subtag = sub.sub_tag;
                button.className = "px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-xl font-medium shadow-md hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200 text-sm";
                buttonsDiv.appendChild(button);
            });
            
            const messageDiv = document.createElement('div');
            messageDiv.className = "flex justify-start mt-2";
            messageDiv.appendChild(buttonsDiv);
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        };

        // Function to handle the sub-response click
        const handleSubResponse = (subTag) => {
            if (!conversationState.currentIntent) return;

            const intent = chatbotData.intents.find(i => i.tag === conversationState.currentIntent);
            const sub = intent.sub_responses.find(s => s.sub_tag === subTag);

            if (sub) {
                addMessage(sub.responses[Math.floor(Math.random() * sub.responses.length)]);
            } else {
                addMessage("I'm sorry, I can't find that option.");
            }

            conversationState.currentIntent = null; // Reset state
            setTimeout(() => {
                addMessage("Is the response a good one?", false);
                evaluationButtons.classList.remove('hidden');
            }, 500);
        };

        // Main event listener for form submission
        chatForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const userMessage = userInput.value.trim();
            if (userMessage === '') return;

            addMessage(userMessage, true);
            userInput.value = '';

            const normalizedInput = lemmatizeText(userMessage).join(' ');

            let foundMatch = false;
            for (const intent of chatbotData.intents) {
                for (const pattern of intent.patterns) {
                    if (normalizedInput.includes(lemmatizeText(pattern).join(' '))) {
                        // Check for sub-responses and handle accordingly
                        if (intent.sub_responses && intent.sub_responses.length > 0) {
                            addMessage(intent.responses[Math.floor(Math.random() * intent.responses.length)]);
                            createSubResponseButtons(intent.sub_responses);
                            conversationState.currentIntent = intent.tag; // Set conversation state
                        } else {
                            addMessage(intent.responses[Math.floor(Math.random() * intent.responses.length)]);
                            setTimeout(() => {
                                addMessage("Is the response a good one?", false);
                                evaluationButtons.classList.remove('hidden');
                            }, 500);
                        }
                        foundMatch = true;
                        break;
                    }
                }
                if (foundMatch) break;
            }

            if (!foundMatch) {
                addMessage("I'm sorry, I don't understand that. Can you rephrase?", false);
            }
        });

        // Event delegation for sub-response buttons
        chatMessages.addEventListener('click', (event) => {
            if (event.target.dataset.subtag) {
                handleSubResponse(event.target.dataset.subtag);
            }
        });

        // Event listener for the "Yes" button
        yesButton.addEventListener('click', () => {
            addMessage("😊", false); // Bot replies with a smiley
            evaluationButtons.classList.add('hidden'); // Hide the buttons after clicking
        });
        
        // Event listener for the "No" button
        noButton.addEventListener('click', () => {
            addMessage("I'm sorry. How can I improve?", false);
            evaluationButtons.classList.add('hidden');
        });

        // Function to render the prompt legend
        const renderPromptLegend = () => {
            for (const intent of chatbotData.intents) {
                const intentContainer = document.createElement('div');
                intentContainer.className = "mb-2";

                const tagHeading = document.createElement('h3');
                tagHeading.className = "text-md font-semibold text-gray-700 dark:text-gray-300 capitalize mb-1";
                tagHeading.textContent = intent.tag.replace(/_/g, ' ');
                intentContainer.appendChild(tagHeading);

                const patternsList = document.createElement('ul');
                patternsList.className = "list-disc list-inside text-sm text-gray-600 dark:text-gray-400";
                
                for (const pattern of intent.patterns) {
                    const listItem = document.createElement('li');
                    listItem.textContent = pattern;
                    patternsList.appendChild(listItem);
                }
                
                if (intent.sub_responses && intent.sub_responses.length > 0) {
                    const subHeading = document.createElement('h4');
                    subHeading.className = "text-sm font-medium text-gray-500 dark:text-gray-400 mt-2 ml-4";
                    subHeading.textContent = "Follow-up prompts:";
                    patternsList.appendChild(subHeading);

                    const subPatternsList = document.createElement('ul');
                    subPatternsList.className = "list-circle list-inside ml-8 text-xs text-gray-500 dark:text-gray-400";
                    intent.sub_responses.forEach(sub => {
                        const subItem = document.createElement('li');
                        subItem.textContent = `${sub.sub_tag.replace(/_/g, ' ')}: (${sub.patterns.join(', ')})`;
                        subPatternsList.appendChild(subItem);
                    });
                    patternsList.appendChild(subPatternsList);
                }
                
                intentContainer.appendChild(patternsList);
                promptList.appendChild(intentContainer);
            }
        };

        // Function to render the tree diagram
        const renderTreeDiagram = () => {
            for (const intent of chatbotData.intents) {
                const intentDiv = document.createElement('div');
                intentDiv.className = "flex items-center space-x-2";

                const mainTag = document.createElement('div');
                mainTag.className = "bg-indigo-500 text-white rounded-xl p-2 font-medium text-sm capitalize";
                mainTag.textContent = intent.tag.replace(/_/g, ' ');
                intentDiv.appendChild(mainTag);
                
                const patternsList = document.createElement('ul');
                patternsList.className = "flex flex-wrap gap-1 text-xs text-gray-500 dark:text-gray-400";
                
                for (const pattern of intent.patterns) {
                    const patternItem = document.createElement('li');
                    patternItem.className = "p-1 bg-gray-200 dark:bg-gray-700 rounded-md";
                    patternItem.textContent = pattern;
                    patternsList.appendChild(patternItem);
                }
                intentDiv.appendChild(patternsList);
                
                treeDiagram.appendChild(intentDiv);
                
                if (intent.sub_responses && intent.sub_responses.length > 0) {
                    const subResponsesDiv = document.createElement('div');
                    subResponsesDiv.className = "ml-4 pl-4 border-l-2 border-dashed border-gray-300 dark:border-gray-600 mt-2 space-y-2";
                    
                    for (const sub of intent.sub_responses) {
                        const subDiv = document.createElement('div');
                        subDiv.className = "flex items-center space-x-2";
                        
                        const subTag = document.createElement('div');
                        subTag.className = "bg-green-500 text-white rounded-xl p-2 font-medium text-xs capitalize";
                        subTag.textContent = sub.sub_tag.replace(/_/g, ' ');
                        subDiv.appendChild(subTag);
                        
                        const subPatternsList = document.createElement('ul');
                        subPatternsList.className = "flex flex-wrap gap-1 text-xs text-gray-500 dark:text-gray-400";
                        for (const subPattern of sub.patterns) {
                            const subPatternItem = document.createElement('li');
                            subPatternItem.className = "p-1 bg-gray-200 dark:bg-gray-700 rounded-md";
                            subPatternItem.textContent = subPattern;
                            subPatternsList.appendChild(subPatternItem);
                        }
                        subDiv.appendChild(subPatternsList);
                        subResponsesDiv.appendChild(subDiv);
                    }
                    treeDiagram.appendChild(subResponsesDiv);
                }
            }
        };

        // Render the prompt legend and tree diagram on page load
        document.addEventListener('DOMContentLoaded', () => {
            renderPromptLegend();
            renderTreeDiagram();
        });
    </script>
</body>
</html>
